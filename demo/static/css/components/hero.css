@layer components {
  .Hero {
    --grid-template: var(--grid-template-basic);

    --hero-offset-height: 1;
    --hero-main-offset-height: 1;
    --hero-heading-offset-height: 0;
    --hero-offset-top: 0;
    --hero-offset: 0;

    --hero-main-space: var(--space-l);

    --hero-min-height: calc((250 / 16) * 1rem);
    --hero-max-height: calc((100dvh - var(--header-height)) * 0.618);

    --hero-height: clamp(
      var(--hero-min-height),
      calc(100dvw / 1.618),
      var(--hero-max-height)
    );

    --hero-visible: min(
      max(0, calc(-1 * (var(--hero-offset-top) - (var(--scroll-y))))),
      var(--hero-offset-height)
    );

    --hero-visible-ratio: calc(
      (var(--hero-visible) / var(--hero-offset-height))
    );

    --hero-scale-ratio: calc(
      var(--hero-visible) /
        (var(--hero-offset-height) - (var(--hero-heading-offset-height)))
    );

    --hero-main-min-height: calc(var(--step-5) + (var(--hero-main-space) * 2));
    --hero-main-max-height: calc(
      var(--hero-max-height) + (var(--hero-main-space) * 2)
    );
    --hero-main-height: clamp(
      var(--hero-main-min-height),
      calc(100% * (1 - var(--hero-visible-ratio))),
      var(--hero-main-max-height)
    );

    --hero-font-size: clamp(
      var(--step-4),
      calc(
        var(--step-4) +
          ((var(--step-5) - var(--step-4)) * (1 - var(--hero-scale-ratio)))
      ),
      var(--step-5)
    );

    aspect-ratio: 1.618 / 1;
    align-items: start;
    container-name: hero;
    container-type: size;
    height: var(--hero-height);
    position: relative;
    min-height: var(--hero-min-height);
    max-height: var(--hero-max-height);

    &::before {
      background: oklch(var(--color-bg));
      background-image: repeating-conic-gradient(
          from calc(var(--hero-visible-ratio) * 20deg) at 0 100%,
          oklch(var(--color-bg-dark) / 1) 0 10deg,
          oklch(var(--color-bg-dark) / 0) 0 20deg
        ),
        linear-gradient(
          225deg,
          oklch(var(--color-bg-dark) / 0.5),
          oklch(var(--color-bg-dark) / 0)
        );
      display: block;
      content: '';
      position: absolute;
      top: 0;
      height: 150%;
      width: 100%;
    }

    &::after {
      background: linear-gradient(
          to top,
          oklch(var(--color-bg) / 1),
          oklch(var(--color-bg) / 0)
        ),
        linear-gradient(
          to right,
          oklch(var(--color-bg) / 1),
          oklch(var(--color-bg) / 0)
        );
      display: block;
      content: '';
      position: absolute;
      top: 100%;
      height: 50%;
      width: 100%;
    }
  }

  .Hero__main {
    align-items: center;
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    justify-items: start;
    height: var(--hero-main-height);
    inset-block-start: 0;
    min-height: var(--hero-main-min-height);
    max-height: var(--hero-main-max-height);
    padding-block: var(--hero-main-space);
    position: sticky;

    & > * {
      grid-column: 1 / 6;
      grid-row: 1;
      justify-self: start;
    }
  }

  .Hero__dino {
    --ratio1: calc(1 - var(--hero-scale-ratio));
    --ratio2: var(--ratio1);
    --color-fade: color-mix(
      in oklch,
      oklch(var(--color-text)) calc(100% * var(--ratio1)),
      oklch(var(--color-green))
    );
    aspect-ratio: 370 / 350;
    grid-column: 4 / 6;
    height: calc(var(--hero-height) - (var(--space-m) * 2));
    justify-self: center;
    fill: none;
    inset-block-start: calc(-1 * var(--space-xs));
    opacity: var(--ratio2);
    position: absolute;
    stroke: var(--color-fade, oklch(var(--color-text)));
    stroke-linecap: round;
    stroke-linejoin: round;
    stroke-miterlimit: 10;
    stroke-width: calc((2 / 16) * 1rem);
    transform: scaleX(-1);
    vector-effect: non-scaling-stroke;
    width: auto;
  }

  .Hero__heading {
    --color1: color-mix(
      in oklch,
      oklch(var(--color-blue)) calc(100% * (1 - var(--hero-scale-ratio))),
      oklch(var(--color-text))
    );
    --color2: color-mix(
      in oklch,
      oklch(var(--color-green)) calc(100% * (1 - var(--hero-scale-ratio))),
      oklch(var(--color-text))
    );
    background: linear-gradient(50deg, var(--color1), var(--color2));
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    font-size: var(--hero-font-size);
    margin: 0;
    transform-origin: 0 100%;
  }

  .Hero__intro {
    --ratio1: calc(1 - var(--hero-scale-ratio));
    --font-size: var(--step-0);
    align-self: start;
    inset-block-start: 50%;
    grid-column: 1 / 4;
    margin-top: calc((var(--hero-font-size) / 2));
    opacity: var(--ratio1);
    position: absolute;
    text-wrap: balance;
  }

  @supports (width: calc(1px * pow(1, 1))) {
    .Hero__dino {
      --ratio1: pow(1 - var(--hero-scale-ratio), 5);
      --ratio2: pow(1 - var(--hero-scale-ratio), 2);
    }

    .Hero__intro {
      --ratio1: pow(1 - var(--hero-scale-ratio), 8);
    }
  }

  @container hero (inline-size > calc((600 / 16) * 1rem)) {
    .Hero__intro {
      grid-column: 1 / 3;
    }
  }

  @container hero (inline-size > calc((600 / 16) * 1rem)) {
    .Hero__dino {
      grid-column: 3 / 6;
      stroke-width: calc((3 / 16) * 1rem);
    }
  }

  @container hero (block-size > calc((300 / 16) * 1rem)) {
    .Hero__intro {
      --font-size: var(--step-1);
    }
  }
}
